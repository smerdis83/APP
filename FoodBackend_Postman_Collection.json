{
	"info": {
		"_postman_id": "food-backend-api-collection",
		"name": "Food Backend API",
		"description": "Complete API collection for testing the Food Backend application\n\nServer: http://localhost:8000\n\nEndpoints:\n- Authentication (Register/Login)\n- Profile Management\n- Restaurant Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"John Doe\",\n  \"phone\": \"+1234567890\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"BUYER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user. Roles: BUYER, SELLER, COURIER"
					},
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"+1234567890\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with phone and password. Returns JWT token."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"description": "JWT token from login response"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						},
						"description": "Get current user's profile information. Requires valid JWT token."
					},
					"response": []
				},
				{
					"name": "Get Profile - No Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						},
						"description": "Test profile endpoint without authentication token (should return 401)"
					},
					"response": []
				},
				{
					"name": "Get Profile - Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.token.here",
								"description": "Invalid JWT token for testing error handling"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						},
						"description": "Test profile endpoint with invalid JWT token (should return 401)"
					},
					"response": []
				}
			],
			"description": "Profile management endpoints"
		},
		{
			"name": "Restaurant Management",
			"item": [
				{
					"name": "Get All Restaurants (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"restaurants"
							]
						},
						"description": "Get all restaurants (public endpoint, no auth required)"
					},
					"response": []
				},
				{
					"name": "Get My Restaurants (Seller Only)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"description": "JWT token from seller login"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/restaurants/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"restaurants",
								"mine"
							]
						},
						"description": "Get restaurants owned by the authenticated seller. Requires SELLER role."
					},
					"response": []
				},
				{
					"name": "Create Restaurant (Seller Only)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"description": "JWT token from seller login"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Delicious Pizza Place\",\n  \"description\": \"Best pizza in town!\",\n  \"address\": \"123 Main St, City, State\",\n  \"phone\": \"+1987654321\",\n  \"cuisine\": \"Italian\",\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"restaurants"
							]
						},
						"description": "Create a new restaurant. Requires SELLER role."
					},
					"response": []
				}
			],
			"description": "Restaurant management endpoints"
		},
		{
			"name": "Test Data Setup",
			"item": [
				{
					"name": "Register Buyer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Alice Buyer\",\n  \"phone\": \"+1111111111\",\n  \"email\": \"alice@buyer.com\",\n  \"password\": \"password123\",\n  \"role\": \"BUYER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a test buyer user"
					},
					"response": []
				},
				{
					"name": "Register Seller",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Bob Seller\",\n  \"phone\": \"+2222222222\",\n  \"email\": \"bob@seller.com\",\n  \"password\": \"password123\",\n  \"role\": \"SELLER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a test seller user"
					},
					"response": []
				},
				{
					"name": "Login Buyer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"+1111111111\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login as buyer and get token"
					},
					"response": []
				},
				{
					"name": "Login Seller",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"+2222222222\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login as seller and get token"
					},
					"response": []
				}
			],
			"description": "Test data setup for comprehensive testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract JWT token from login responses",
					"if (pm.response.code === 200 || pm.response.code === 201) {",
					"    const response = pm.response.json();",
					"    if (response.token) {",
					"        pm.environment.set('authToken', response.token);",
					"        console.log('JWT token saved to environment');",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		}
	]
} 